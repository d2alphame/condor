package CondorUtils::Logger;

use v5.34;
use strict;
use warnings;

use POSIX;
use threads;

sub create($);
sub info($);

# Anything greater than 5 will log all
my $CONFIGURED_LEVEL = '';                          # Set this to an empty string or any false value to disable logging
my %LEVELS = (
    FATAL => {
        level => 1,
        string => 'FATAL'
    },

    ERROR => {
        level => 2,
        string => 'ERROR'
    },

    WARN => {
        level => 3,
        string => 'WARN '
    },

    INFO => {
        level => 4,
        string => 'INFO '
    },

    DEBUG => {
        level => 5,
        string => 'DEBUG'
    }
);

my sub hub {

    my ($self, $message, $level, $thread_id) = @_;
    return unless $CONFIGURED_LEVEL;
    my $tmplevel = $self->(){level} || $CONFIGURED_LEVEL;

}

my sub print_log($$$$;$) {
    # Print the log
    my ($message, $level, $group, $thread_id, $handle) = @_;

    # Generate the actual log line printed and print it
    my $log_line = strftime("%a, %e-%b-%Y %r $LEVELS{$level}->{string} $group ThreadId=$thread_id $message", localtime);
    if($handle) {
        say $handle $log_line;
    }
    else {
        say $log_line;
    }
}


# Assembles the log line. The parameters are
# message       =>  The message to log
# level         =>  The log level
# group         =>  The group for the log
# fthread_id    =>  String representation of the thread id. This is usually an unsigned integer padded with zeros to 4
#                       digits. E.g. '0056'
my sub assemble_log($$$$$$$$) {
    my %params = @_;
    return strftime("%a, %e-%b-%Y %r $params{level} ThreadId=$params{fthread_id} [$params{group}] $params{message}", localtime);
}


# Returns a default logger as a closure
sub get_default($$) {
    my %params = @_;
    my $group = $params{group} || 'DefaultLogger';       # Set default group for this logger if one isn't given
    my $default_level = 'DEBUG';                           # Used for when a log doesn't have a level
 
    # Ephemeral logs are logs that are generated by the default logger before a proper logger is configured
    # Once a logger is configured, ephemeral logs can be flushed to the log file
    my @ephemeral_logs;

    return sub {
        my %_params = @_;
        my $level;
        my $thread_id = threads->tid;
        my $fthread_id = sprintf "%04u", $thread_id;     # Formatted string representation of the thread id. This is what goes into the logs
        my $log_line;

        # If a message was not passed or is empty
        unless(exists $_params{message} && $_params{message}) {
            {
                my $log_line = assemble_log
                    message     => "Received a log without a message.",
                    level       => $default_level,
                    group       => $group,
                    fthread_id  => $fthread_id;

                push @ephemeral_logs, $log_line;
                say $log_line;
                return;
            }
        }
        # If log level was not passed or is false
        unless(exists $_params{level} && $_params{level}) {
            {
                my $log_line = assemble_log
                    message     => "Received a log without a level. Using configured default logging level '$default_level'.",
                    level       => $LEVELS{$default_level}->{string},
                    group       => $group,
                    fthread_id  => $fthread_id;

                push @ephemeral_logs, $log_line;
                say $log_line;
            }
            $level = $default_level;
        }
        # If log level was passed but is invalid
        elsif(not exists $LEVELS{$_params{level}}) {
            {
                my $log_line = assemble_log
                    message     => "Received an invalid log level '$_params{level}'. Using configured default logging level '$default_level'. ",
                    level       => $LEVELS{$default_level}->{string},
                    group       => $group,
                    fthread_id  => $fthread_id;

                push @ephemeral_logs, $log_line;
                say $log_line;
            }
            $level = $default_level;
        }
        else { $level = $_params{level}; }

        $log_line = assemble_log
            message     => $_params{message},
            level       => $LEVELS{$level}->{string},
            group       => $group,
            fthread_id  => $fthread_id;

        push @ephemeral_logs, $log_line;
        say $log_line;
    }
    
}

# Use this sub routine for logging before you're able to setup and get a proper logger
# Call this with your log message, level, and group
# This logs at all levels and outputs to <STDOUT>
sub default {
    my %params = @_;
    my $group = $params{group};
    my $thread_id = threads->tid();
    unless($group) {
        $group = 'DefaultLogger';
        { 
            my $level = 'DEBUG';
            my $message = "Received a log without a group. Will use '$group' as the default group.";
            print_log($message, $level, $group, $thread_id, *STDOUT);
  
        }
    }

    my $message = $params{message};
    unless($message) {
        $message = "Received a log without a message.";
        {
            my $level = 'WARN';
            print_log($message, $level, $group, $thread_id, *STDOUT);
            return;
        }
    }

    my $level = $params{level};
    unless($level) {
        $level = 'DEBUG';
        {
            my $message = "Received a log without a log level. Will use 'WARN' as the level.";
            print_log($message, $level, $group, $thread_id, *STDOUT);
        }
        print_log($message, 'INFO', $group, $thread_id, *STDOUT);
        return;
    }

    # Invalid logging level specified
    unless(exists $LEVELS{$level}) {
        {
            my $new_level = 'WARN';
            my $message = "Received a log line with invalid log level '$level'.";
            print_log($message, $new_level, $group, $thread_id, *STDOUT);
            $message = "Use one of the following logging levels: @{[ keys %LEVELS]}";
            print_log($message, $new_level, $group, $thread_id, *STDOUT);
            print_log("Will use 'INFO' as the log level for this log", $new_level, $group, $thread_id, *STDOUT);
        }
        $level = 'INFO';
    }

    print_log($message, $level, $group, $thread_id, *STDOUT);
}




sub debug($) {
    return unless $CONFIGURED_LEVEL;

}

sub info($) {
    my ($self, $message) = @_;
    my $thread_id = threads->tid();
    threads->create(\&hub, $self, $message, $LEVELS{INFO}, $thread_id)->detach;
}

sub create($) {
    my $class = shift;
    my %params = @_;

    # If the 'level' parameter is not defined
    unless($params{level}){

    }

    return bless sub {
        my $level = @_;

    }, $class;
}



1;