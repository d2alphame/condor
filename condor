#! /usr/bin/perl
use v5.34;
use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin";
use File::Path qw(make_path);
use Getopt::Long;
use POSIX;
use threads;

use CondorUtils::Logger;

my $CONDOR_PROGRAM_NAME = 'condor';

my $CONDOR_PROCESS_FOLDER = "/tmp/$CONDOR_PROGRAM_NAME";
my $CONDOR_PROCESS_FILE = "$CONDOR_PROCESS_FOLDER/process";
my $CONDOR_TEMP_LOG = "$CONDOR_PROCESS_FOLDER/logs";
my $CONDOR_LOG;
my $CONDOR_CONFIG_FILE;


my $sub_command;
my %dispatch_table = (
    start => \&command_start,
    stop => \&command_stop
);

if(@ARGV && exists $dispatch_table{$ARGV[0]}) {             # Check if the first argument is a valid sub command
    $sub_command = shift @ARGV;                             # Remove the sub command from the arguments
    $dispatch_table{$sub_command}();                        # Call the sub routine for the command. Each subroutine can handle its own arguments
} else {
    # Assume the remaining options are for condor. Parse the options.

}

# Sub routine to handle the 'start' sub command
sub command_start {
    # Check if an instance of condor is already running. If so, exit.
    if(-e $CONDOR_PROCESS_FILE) {
        say "An instance of $CONDOR_PROGRAM_NAME is already running";
        exit 0;
    }

    # Create the process folder in temp, in case it doesn't exist.
    make_path($CONDOR_PROCESS_FOLDER);
    open my $tmp_log_file_handle, ">", $CONDOR_TEMP_LOG
        or die "Could not create a temporary log file $CONDOR_TEMP_LOG: $!\n";
    say $tmp_log_file_handle strftime("%a, %e-%b-%Y %r INFO  Condor ThreadId=0 Received command to start condor\n", localtime);
}


# Sub routine to handle the 'stop' sub command
sub command_stop {
    # Check if there's already no instance running and exit if so
    unless(-e $CONDOR_PROCESS_FILE) {
        say "No instance of $CONDOR_PROGRAM_NAME is running";
        exit 0;
    }
}